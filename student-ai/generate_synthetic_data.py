# generate_synthetic_data.py
import sqlite3
import pandas as pd
import numpy as np
from faker import Faker
import random
from tqdm import tqdm

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
NUM_STUDENTS = 5000
WEEKS_PER_STUDENT = 20
SUBJECTS = ["math", "russian", "physics", "literature", "biology"]
EVENTS = [None, "olympiad", "competition", "camp", "illness"]
ABSENCE_REASONS = [None, "illness", "competition", "family", "other"]
CLUB_TYPES = ["science", "arts", "sports", "none"]

fake = Faker("ru_RU")
Faker.seed(42)
np.random.seed(42)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–æ–≤ ===
students = []
for i in range(1, NUM_STUDENTS + 1):
    students.append({
        "student_id": i,
        "full_name": fake.name(),
        "grade_level": np.random.randint(7, 12)
    })

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π ===
records = []

for student in tqdm(students, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"):
    student_id = student["student_id"]
    grade_level = student["grade_level"]
    
    # –ë–∞–∑–æ–≤—ã–π "—É—Ä–æ–≤–µ–Ω—å" —É—á–µ–Ω–∏–∫–∞ (–æ—Ç 2.5 –¥–æ 5.0)
    base_skill = np.clip(np.random.normal(4.0, 0.6), 2.5, 5.0)
    
    for week in range(1, WEEKS_PER_STUDENT + 1):
        for subject in SUBJECTS:
            # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            event = np.random.choice(EVENTS, p=[0.7, 0.08, 0.07, 0.05, 0.1])
            
            # –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            absence_reason = None
            attendance = 1
            
            if event == "illness":
                absence_reason = "illness"
                attendance = 0
            elif event in ["competition", "camp"]:
                absence_reason = event
                attendance = np.random.choice([0, 1], p=[0.6, 0.4])
            else:
                # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫
                if np.random.rand() < 0.08:
                    absence_reason = np.random.choice(["family", "other"])
                    attendance = 0
            
            # –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫—Ä—É–∂–∫–∞
            club_attended = int(np.random.rand() > 0.4)
            
            # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É
            grade_noise = np.random.normal(0, 0.4)
            grade_trend = 0
            
            # –í–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            if event == "olympiad" and subject in ["math", "physics"]:
                grade_trend += 0.4
            if event == "illness":
                grade_trend -= 0.5
            if club_attended and subject in ["math", "physics", "literature"]:
                grade_trend += 0.2
            
            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ/—Ä–æ—Å—Ç (–¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏)
            drift = (week - 10) * np.random.normal(0, 0.02)
            
            grade = base_skill + grade_trend + grade_noise + drift
            grade = np.clip(round(grade * 2) / 2, 2.0, 5.0)  # —Ç–æ–ª—å–∫–æ —Å —à–∞–≥–æ–º 0.5
            
            records.append({
                "student_id": student_id,
                "subject": subject,
                "week_number": week,
                "grade": grade,
                "attendance": attendance,
                "absence_reason": absence_reason,
                "club_attended": club_attended,
                "event": event
            })

# === –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame ===
df_records = pd.DataFrame(records)

# === –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (target) ===
# –¶–µ–ª—å: –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, —É–ø–∞–¥—ë—Ç –ª–∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 4

def compute_target(group):
    group = group.sort_values("week_number")
    grades = group["grade"].values
    weeks = group["week_number"].values
    
    target = np.zeros(len(grades))
    # –ù–∞—á–∏–Ω–∞–µ–º —Å 6-–π –Ω–µ–¥–µ–ª–∏ (—á—Ç–æ–±—ã –±—ã–ª–æ 4+2 –æ–∫–Ω–æ)
    for i in range(5, len(grades)):
        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
        recent_avg = grades[i-1:i+1].mean()
        # –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        past_avg = grades[i-5:i-1].mean()
        # –µ—Å–ª–∏ —É–ø–∞–ª–æ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.3 –±–∞–ª–ª–∞
        if past_avg - recent_avg > 0.3:
            target[i] = 1
    group["target"] = target
    return group

print("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...")
df_with_target = df_records.groupby(["student_id", "subject"]).apply(compute_target).reset_index(drop=True)

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite ===
conn = sqlite3.connect("school.db")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
pd.DataFrame(students).to_sql("students", conn, if_exists="replace", index=False)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–∞—Ä–≥–µ—Ç–æ–º
df_with_target.to_sql("academic_records", conn, if_exists="replace", index=False)

conn.close()

print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df_with_target)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {NUM_STUDENTS} —É—á–µ–Ω–∏–∫–æ–≤.")
print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ target: {df_with_target['target'].value_counts().to_dict()}")